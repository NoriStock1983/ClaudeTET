name: Static Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  POETRY_VERSION: "1.8.0"

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarQubeの履歴分析のため

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --with dev
        # 静的解析ツールのインストール
        poetry add --group dev \
          flake8==7.1.1 \
          black==24.8.0 \
          isort==5.13.2 \
          mypy==1.13.0 \
          bandit==1.7.10 \
          safety==3.2.8 \
          pylint==3.3.1 \
          pydocstyle==6.3.0 \
          vulture==2.13 \
          radon==6.0.1

    - name: Code formatting check (Black)
      run: |
        poetry run black --check --diff .
      continue-on-error: true

    - name: Import sorting check (isort)
      run: |
        poetry run isort --check-only --diff .
      continue-on-error: true

    - name: Linting (Flake8)
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true

    - name: Type checking (MyPy)
      run: |
        # FastAPI + SQLAlchemy用の設定
        echo "[mypy]" > mypy.ini
        echo "python_version = 3.13" >> mypy.ini
        echo "plugins = pydantic.mypy, sqlalchemy.ext.mypy.plugin" >> mypy.ini
        echo "ignore_missing_imports = True" >> mypy.ini
        echo "strict_optional = True" >> mypy.ini
        echo "warn_redundant_casts = True" >> mypy.ini
        echo "warn_unused_ignores = True" >> mypy.ini
        echo "disallow_any_generics = True" >> mypy.ini
        echo "check_untyped_defs = True" >> mypy.ini
        echo "no_implicit_reexport = True" >> mypy.ini
        echo "" >> mypy.ini
        echo "[pydantic-mypy]" >> mypy.ini
        echo "init_forbid_extra = True" >> mypy.ini
        echo "init_typed = True" >> mypy.ini
        echo "warn_required_dynamic_aliases = True" >> mypy.ini
        
        poetry run mypy . --config-file mypy.ini
      continue-on-error: true

    - name: Security analysis (Bandit)
      run: |
        poetry run bandit -r . -f json -o bandit-report.json || true
        poetry run bandit -r . -f txt
      continue-on-error: true

    - name: Vulnerability check (Safety)
      run: |
        poetry run safety check --json --output safety-report.json || true
        poetry run safety check
      continue-on-error: true

    - name: Code quality (Pylint)
      run: |
        poetry run pylint --load-plugins=pylint_django --django-settings-module=settings . --output-format=json > pylint-report.json || true
        poetry run pylint . --output-format=text
      continue-on-error: true

    - name: Documentation style (pydocstyle)
      run: |
        poetry run pydocstyle . --convention=google
      continue-on-error: true

    - name: Dead code detection (Vulture)
      run: |
        poetry run vulture . --min-confidence 80
      continue-on-error: true

    - name: Code complexity analysis (Radon)
      run: |
        poetry run radon cc . --json > radon-cc.json
        poetry run radon cc . --show-complexity --min B
        poetry run radon mi . --json > radon-mi.json
        poetry run radon mi . --show --min B
      continue-on-error: true

    - name: Generate SARIF reports for GitHub Security
      run: |
        # Bandit SARIF変換
        if [ -f bandit-report.json ]; then
          poetry run bandit -r . -f sarif -o bandit.sarif || true
        fi
        
        # Pylint結果をSARIF形式に変換（簡易版）
        if [ -f pylint-report.json ]; then
          python -c "
import json
import os
try:
    with open('pylint-report.json', 'r') as f:
        pylint_data = json.load(f)
    
    sarif = {
        'version': '2.1.0',
        'runs': [{
            'tool': {
                'driver': {
                    'name': 'Pylint',
                    'version': '3.3.1'
                }
            },
            'results': []
        }]
    }
    
    for issue in pylint_data:
        if isinstance(issue, dict) and 'path' in issue:
            sarif['runs'][0]['results'].append({
                'ruleId': issue.get('message-id', 'unknown'),
                'message': {'text': issue.get('message', '')},
                'locations': [{
                    'physicalLocation': {
                        'artifactLocation': {'uri': issue.get('path', '')},
                        'region': {'startLine': issue.get('line', 1)}
                    }
                }]
            })
    
    with open('pylint.sarif', 'w') as f:
        json.dump(sarif, f, indent=2)
except Exception as e:
    print(f'SARIF conversion failed: {e}')
"
        fi

    - name: Upload SARIF files to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          bandit.sarif
          pylint.sarif
      continue-on-error: true

    - name: SonarQube analysis
      uses: sonarqube-quality-gate-action@master
      with:
        scanMetadataReportFile: .scannerwork/report-task.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

    - name: Run SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.python.version=3.13
          -Dsonar.sources=.
          -Dsonar.exclusions=**/*_test.py,**/test_*.py,**/tests/**,**/.venv/**
          -Dsonar.python.bandit.reportPaths=bandit-report.json
          -Dsonar.python.pylint.reportPaths=pylint-report.json
          -Dsonar.python.coverage.reportPaths=coverage.xml
      continue-on-error: true

    - name: Generate summary report
      if: always()
      run: |
        echo "## Static Analysis Summary" > static-analysis-summary.md
        echo "" >> static-analysis-summary.md
        echo "### Tools Executed:" >> static-analysis-summary.md
        echo "- ✅ Black (Code formatting)" >> static-analysis-summary.md
        echo "- ✅ isort (Import sorting)" >> static-analysis-summary.md
        echo "- ✅ Flake8 (Linting)" >> static-analysis-summary.md
        echo "- ✅ MyPy (Type checking)" >> static-analysis-summary.md
        echo "- ✅ Bandit (Security analysis)" >> static-analysis-summary.md
        echo "- ✅ Safety (Vulnerability check)" >> static-analysis-summary.md
        echo "- ✅ Pylint (Code quality)" >> static-analysis-summary.md
        echo "- ✅ pydocstyle (Documentation style)" >> static-analysis-summary.md
        echo "- ✅ Vulture (Dead code detection)" >> static-analysis-summary.md
        echo "- ✅ Radon (Complexity analysis)" >> static-analysis-summary.md
        echo "- ✅ SonarQube (Comprehensive analysis)" >> static-analysis-summary.md
        echo "" >> static-analysis-summary.md
        echo "### Reports Generated:" >> static-analysis-summary.md
        echo "- Security findings uploaded to GitHub Security tab" >> static-analysis-summary.md
        echo "- Detailed analysis available in SonarQube dashboard" >> static-analysis-summary.md
        echo "- JSON reports available as workflow artifacts" >> static-analysis-summary.md

    - name: Upload analysis reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-reports
        path: |
          bandit-report.json
          safety-report.json
          pylint-report.json
          radon-cc.json
          radon-mi.json
          bandit.sarif
          pylint.sarif
          static-analysis-summary.md
        retention-days: 30

    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('static-analysis-summary.md')) {
            const summary = fs.readFileSync('static-analysis-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
